[tool.poetry]
name = "repository"
version = "0.0.1"
description = "Repository pattern implementation for popular ORM's and drivers"
authors = ["MatveyIvanov <cool.matvey250301@gmail.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
django = "5.1.4"
sqlalchemy = "2.0.36"
pytest-django = "4.10.0"

[tool.poetry.group.dev.dependencies]
pytest = "8.2.1"
pytest-cov = "5.0.0"
pytest-mock = "3.14.0"
pytest-asyncio = "0.23.5"
flake8 = "7.1.0"
mypy = "1.10.0"
black = "24.4.2"
pre-commit = "3.7.1"
isort = "5.13.2"

[tool.pytest.ini_options]
pythonpath = [
  "."
]
python_files = "test_*.py"
filterwarnings = [
    "ignore::RuntimeWarning"
]
markers = [
    "unit: marks tests as unit-tests (deselect with '-m \"not unit\"')",
    "integration: marks tests as integration-tests (deselect with '-m \"not integration\"')",
]
addopts = [
    "-v",
    "-rfxP",
    "--cov",
    "--log-level=CRITICAL",
]
DJANGO_SETTINGS_MODULE = "tests.django.config.settings"

[tool.coverage.report]
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]
omit = [
    "*conftest.py",
    "*abstract.py",
    "*__init__*",
    "*/tests/*",
]

[tool.black]
exclude = '''
'''

[tool.isort]
profile = "black"
skip_glob = []

[tool.mypy]
python_version = 3.11
exclude = [
    "tests",
    "tests\\.py",
]
ignore_missing_imports = false
plugins = [
    
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
